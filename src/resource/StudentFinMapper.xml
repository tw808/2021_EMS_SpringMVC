<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ems1.finance.mapper.StudentFinMapper">
  <resultMap id="BaseResultMap" type="com.ems1.po.StudentFin">
    <id column="pay_id" jdbcType="INTEGER" property="payId" />
    <result column="stu_id" jdbcType="INTEGER" property="stuId" />
    <result column="staff_id" jdbcType="INTEGER" property="staffId" />
    <result column="pay_situ" jdbcType="VARCHAR" property="paySitu" />
    <result column="pay_method" jdbcType="VARCHAR" property="payMethod" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="discount_amount" jdbcType="DOUBLE" property="discountAmount" />
    <result column="original_amount" jdbcType="DOUBLE" property="originalAmount" />
    <result column="paid_amount" jdbcType="DOUBLE" property="paidAmount" />
    <result column="debt_amount" jdbcType="DOUBLE" property="debtAmount" />
    <result column="pay_remark" jdbcType="VARCHAR" property="payRemark" />
  </resultMap>
  <sql id="Base_Column_List">
    pay_id, stu_id, staff_id, pay_situ, pay_method, pay_time, discount_amount, original_amount, 
    paid_amount, debt_amount, pay_remark
  </sql>
  <select id="getStuFinList"  parameterType="com.ems1.po.StudentFin" resultMap="BaseResultMap">
select
    <include refid="Base_Column_List" />
    from student_fin
    where stu_id=#{stuId}

  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student_fin
    where pay_id = #{payId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student_fin
    where pay_id = #{payId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ems1.po.StudentFin">
    insert into student_fin (pay_id, stu_id, staff_id, 
      pay_situ, pay_method, pay_time, 
      discount_amount, original_amount, paid_amount, 
      debt_amount, pay_remark)
    values (#{payId,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, #{staffId,jdbcType=INTEGER}, 
      #{paySitu,jdbcType=VARCHAR}, #{payMethod,jdbcType=INTEGER}, #{payTime,jdbcType=TIMESTAMP}, 
      #{discountAmount,jdbcType=DOUBLE}, #{originalAmount,jdbcType=DOUBLE}, #{paidAmount,jdbcType=DOUBLE}, 
      #{debtAmount,jdbcType=DOUBLE}, #{payRemark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ems1.po.StudentFin">
    insert into student_fin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="payId != null">
        pay_id,
      </if>
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="staffId != null">
        staff_id,
      </if>
      <if test="paySitu != null">
        pay_situ,
      </if>
      <if test="payMethod != null">
        pay_method,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="discountAmount != null">
        discount_amount,
      </if>
      <if test="originalAmount != null">
        original_amount,
      </if>
      <if test="paidAmount != null">
        paid_amount,
      </if>
      <if test="debtAmount != null">
        debt_amount,
      </if>
      <if test="payRemark != null">
        pay_remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="payId != null">
        #{payId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="staffId != null">
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="paySitu != null">
        #{paySitu,jdbcType=VARCHAR},
      </if>
      <if test="payMethod != null">
        #{payMethod,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="discountAmount != null">
        #{discountAmount,jdbcType=DOUBLE},
      </if>
      <if test="originalAmount != null">
        #{originalAmount,jdbcType=DOUBLE},
      </if>
      <if test="paidAmount != null">
        #{paidAmount,jdbcType=DOUBLE},
      </if>
      <if test="debtAmount != null">
        #{debtAmount,jdbcType=DOUBLE},
      </if>
      <if test="payRemark != null">
        #{payRemark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ems1.po.StudentFin">
    update student_fin
    <set>
      <if test="stuId != null">
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="staffId != null">
        staff_id = #{staffId,jdbcType=INTEGER},
      </if>
      <if test="paySitu != null">
        pay_situ = #{paySitu,jdbcType=VARCHAR},
      </if>
      <if test="payMethod != null">
        pay_method = #{payMethod,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="discountAmount != null">
        discount_amount = #{discountAmount,jdbcType=DOUBLE},
      </if>
      <if test="originalAmount != null">
        original_amount = #{originalAmount,jdbcType=DOUBLE},
      </if>
      <if test="paidAmount != null">
        paid_amount = #{paidAmount,jdbcType=DOUBLE},
      </if>
      <if test="debtAmount != null">
        debt_amount = #{debtAmount,jdbcType=DOUBLE},
      </if>
      <if test="payRemark != null">
        pay_remark = #{payRemark,jdbcType=VARCHAR},
      </if>
    </set>
    where pay_id = #{payId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ems1.po.StudentFin">
    update student_fin
    set stu_id = #{stuId,jdbcType=INTEGER},
      staff_id = #{staffId,jdbcType=INTEGER},
      pay_situ = #{paySitu,jdbcType=VARCHAR},
      pay_method = #{payMethod,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      discount_amount = #{discountAmount,jdbcType=DOUBLE},
      original_amount = #{originalAmount,jdbcType=DOUBLE},
      paid_amount = #{paidAmount,jdbcType=DOUBLE},
      debt_amount = #{debtAmount,jdbcType=DOUBLE},
      pay_remark = #{payRemark,jdbcType=VARCHAR}
    where pay_id = #{payId,jdbcType=INTEGER}
  </update>
</mapper>